package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _template_apisrv_go_mod_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x95\x4d\x8e\xe3\x36\x10\x85\xd7\xf1\x29\xbc\x4c\x10\x48\xaa\xe2\x3f\x2f\x91\x5d\x0e\x40\x89\x25\x99\x6d\x4a\x74\x48\xca\x0d\xcf\x60\xee\x1e\xd8\x1e\x60\x2c\x07\xee\x78\xad\x57\x1f\xeb\xe7\x3d\x68\x4e\x7e\x8d\xb4\xff\xfe\xbd\xfd\xcb\xcd\xf4\xe3\xc7\x6e\x4a\x7b\x6c\x51\xec\x76\x99\xfe\x59\x43\xa6\xfd\xef\xbb\xdf\xa6\x50\x0f\x6b\xdf\x0e\x69\xee\xfe\x5e\x8e\xcb\x67\x5a\xba\x29\x0d\x69\x19\xc3\xb4\x3f\x43\x0b\x2d\x34\x0c\xd0\x22\x32\x85\x1a\x8c\x60\x8d\x51\xe0\x34\x1b\x7b\x21\x46\xbf\xa9\xef\x43\x8d\x97\x6e\x4a\x4d\x09\xf3\x29\xd2\x47\x49\xcb\x15\x21\x5b\xd8\xca\xe6\xf0\x8d\xb2\x5b\x2e\x9d\x2b\x85\x72\x7d\x78\x46\x81\x42\x64\x0c\x2d\x17\x4d\xaf\xc9\x73\xdd\x1b\x66\x94\xdd\x77\xdd\x3e\x2c\x3e\x64\x1a\xea\x86\x35\xba\x81\xfa\x94\x8e\x53\xea\x86\x98\x86\xe3\x03\x4b\x82\x40\x00\x04\x8b\xbc\x51\x00\xde\x58\xe3\x46\x01\xee\x1d\x16\x2d\x65\xcd\xf4\x0b\xc6\x00\x18\x30\xb4\xa8\x18\x6b\x14\x1f\x71\x18\x95\x74\x83\x18\xde\x81\x8d\x99\xe8\x94\x36\x73\x4a\x50\xc8\xd0\x30\x0b\xb2\xf1\xc2\xf9\x51\xf0\x5e\xcb\xfe\xad\x39\xa7\xec\x86\x87\xd6\xd0\x80\x06\x05\x02\x40\xda\x46\xcb\x61\x44\xcb\x0d\x13\x5c\xbc\xaa\x3f\xd4\x7a\xf2\xe9\x73\xf9\x0f\x82\x4b\xcb\x58\x23\xad\xb6\x9e\xdb\x1e\xe5\xc0\xde\x69\xa7\x54\xb7\x59\xbb\x02\x06\x16\x8d\x10\x28\x1b\x2d\x51\x6b\xce\x95\x05\xf9\x2e\xab\x96\xc7\x35\x21\x80\x62\x0c\x15\x93\x0d\xf6\x5a\x39\xef\x95\x60\x24\xde\x62\xad\x7d\xa1\xfa\x74\x42\xce\x90\x69\x54\xcd\x60\x10\x9d\x37\xc6\xd3\xf0\x15\xac\xfc\xf4\xf3\x5a\x43\x2c\xdb\x7d\x5d\xcf\x27\x18\xd7\x8d\xb7\xd2\x09\xa9\x0d\x67\xfc\xf5\xf9\x26\x97\x2f\xfd\x9a\x7d\x97\xc9\x87\x29\xed\xcf\xd8\xaa\x96\x6d\x25\xa9\x39\x45\x77\x99\x72\x5a\x17\xdf\xc5\x34\xb8\x48\xb7\x37\x91\x3f\xe5\x67\xab\x5c\x97\x70\xa6\x5c\x5c\x6c\x6a\x76\x4b\x89\xae\xa6\x7c\x2b\xd3\x5f\x96\x9d\x5d\x0c\xfe\xaa\xed\xce\x08\xfb\x33\x42\xfb\xfc\xcc\x07\x1d\x82\x3b\xdc\xe2\x5c\xf3\x58\xc3\xfc\x68\x3a\x8d\x0c\x10\x05\x82\x14\x0d\x7a\xce\x01\x78\xcf\xbf\x0a\xea\x47\x58\xbe\x1d\xd6\x6e\x4a\x79\xbe\x4e\x6f\x5b\x54\xdb\xef\x69\xe9\xd3\x1a\x23\xdd\x73\xfc\x99\xf2\xcd\x54\xd8\xc2\x6b\xe4\x1a\x03\x2d\x65\x38\xcc\xc1\xd7\x9b\xad\x73\x5a\x2b\xe5\x2b\xff\x79\x98\x63\xee\x4e\x99\x6a\xbd\xfc\x1f\x34\x52\xa9\x39\xbb\xda\x5c\x83\x1b\x22\x35\x39\x55\x57\x29\xa6\xa9\xec\xcf\xac\x65\x2d\xfc\x19\x96\x21\xcd\x27\x57\x43\x1f\xe9\x65\xed\xaf\x9d\x61\x0b\x2d\xbe\x7c\xef\x74\x9c\x3a\xca\x39\xe5\xdb\xad\xed\x17\x9d\xe5\x30\x8e\xd7\xd5\x74\x71\x2c\x87\x94\x8e\x1b\x3f\xda\x6b\xf2\x04\x72\x68\x7a\xcb\xd0\xd0\x28\x0d\x8c\x72\x53\x5f\x68\x9a\x69\xa9\x21\x75\xc7\xb2\x06\x7f\x6f\x6c\xeb\xc1\x12\xf2\x7a\x2a\xb4\x74\x31\x4d\x79\x2d\x57\x89\x78\x96\xcc\x2e\xd7\x4b\xa9\x99\xa8\x96\xfb\x9f\xe2\x4c\x97\xbb\xa1\x5f\x47\xa9\x52\x4f\x47\xd7\x3d\x1a\x09\x5b\xf9\x24\x4f\xa7\xe3\xd4\x86\xa5\x1b\x0e\x34\x1c\xdb\x33\xde\x3b\xfc\x39\xa0\x62\x06\x35\x47\x30\x8d\x36\x66\xf4\xda\x08\x40\xa6\x5f\x10\x2e\x6e\x8e\xed\x99\xdd\x0f\xb6\x15\xfd\xb1\xfb\x37\x00\x00\xff\xff\x68\x98\x95\x39\x16\x07\x00\x00")

func template_apisrv_go_mod_tmpl() ([]byte, error) {
	return bindata_read(
		_template_apisrv_go_mod_tmpl,
		"template/apisrv/go.mod.tmpl",
	)
}

var _template_apisrv_go_sum_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xe5\x2a\x4e\x49\x4b\x2c\x4e\x49\x53\xe0\x02\x04\x00\x00\xff\xff\x69\xad\xc6\x93\x13\x00\x00\x00")

func template_apisrv_go_sum_tmpl() ([]byte, error) {
	return bindata_read(
		_template_apisrv_go_sum_tmpl,
		"template/apisrv/go.sum.tmpl",
	)
}

var _template_apisrv_test_test_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\x34\x32\x06\x21\xac\x14\x20\x00\x00\xff\xff\xd0\xef\x89\xa9\x1c\x00\x00\x00")

func template_apisrv_test_test_go() ([]byte, error) {
	return bindata_read(
		_template_apisrv_test_test_go,
		"template/apisrv/test/test.go",
	)
}

var _template_apisrv_test2_song_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\x34\x32\x06\x21\x40\x00\x00\x00\xff\xff\x58\xde\x86\xf6\x07\x00\x00\x00")

func template_apisrv_test2_song_go() ([]byte, error) {
	return bindata_read(
		_template_apisrv_test2_song_go,
		"template/apisrv/test2/song.go",
	)
}

var _template_apisrv_test2_test2_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\x34\x32\x06\x21\x54\x0a\x10\x00\x00\xff\xff\xcc\xa4\xfb\xfa\x15\x00\x00\x00")

func template_apisrv_test2_test2_go() ([]byte, error) {
	return bindata_read(
		_template_apisrv_test2_test2_go,
		"template/apisrv/test2/test2.go",
	)
}

var _template_srv_2021_atomic_main_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcb\xb1\xaa\x02\x31\x10\x85\xe1\x3a\xe7\x29\x86\x14\x97\x0c\x5c\x57\x82\x62\x67\xe1\x1b\xd8\xd8\x0a\x43\xd6\x48\xd0\xcc\x2e\x71\x56\x10\xf1\xdd\x85\xdd\xda\xf6\x9c\xef\x1f\x25\xdd\xe4\x7a\xa1\x2a\x45\x81\x52\xc7\xa1\x19\x05\x38\x9f\xab\x79\x38\xff\x78\x69\x5a\x8b\x0d\xb5\x24\x0f\x06\xf2\xa4\x69\xc6\x81\xe9\x0d\xf7\x94\x46\x42\x53\x51\xdb\x6d\x69\x4f\x1b\xb8\xc5\x76\x87\xbe\x3f\xcd\x6b\xf8\x93\x7f\x8a\xfc\xe3\x38\x2f\x69\x88\xab\xc8\x0c\x97\xab\x75\xc7\x56\xd4\xee\x1a\x84\xf1\xc1\x37\x00\x00\xff\xff\x45\x73\x4c\xa3\x9f\x00\x00\x00")

func template_srv_2021_atomic_main_go() ([]byte, error) {
	return bindata_read(
		_template_srv_2021_atomic_main_go,
		"template/srv/2021/atomic/main.go",
	)
}

var _template_srv_2021_goroutine_main_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x4d\x6f\xdb\x30\x0c\x3d\x4b\xbf\x82\xf0\xa1\xb0\x17\xe7\xab\xeb\x86\x6d\x8d\x0b\x14\x1b\xb0\x5b\xb7\xcb\xb6\x43\x90\x83\xa0\xc8\xae\x50\x5b\x32\x1c\xb9\x5e\x11\xf8\xbf\x0f\xa4\x6c\xc7\x5d\xb3\x35\x18\x7a\xd9\x25\x96\x44\xf2\x91\xef\x89\x54\x4a\x21\xef\x44\xa6\xa0\x10\xda\x70\xae\x8b\xd2\x56\x0e\x42\xce\x82\xb4\x70\x01\x67\x41\xa5\xd2\x5c\x49\x5a\xee\x1e\x8c\xec\xbf\x73\xe1\x6c\xa1\x65\xc0\x23\xce\xdd\x43\xa9\xe0\xda\xe8\x42\xe4\xb0\x73\x55\x2d\x1d\xec\x39\xbb\x11\x85\x02\xdc\x6b\x93\x71\x76\x2d\x6f\x85\x01\xfa\xd1\xc6\x71\xf6\x51\xe4\x39\xe0\x52\x55\xa9\x90\x6a\xdf\x72\x76\x53\x17\x00\x50\x6b\xe3\xde\x5e\xf0\x96\xf3\xb4\x36\x92\xca\x0a\x23\xc4\xbb\x17\x15\x34\x19\x60\xf2\xd9\x0f\xa1\xdd\xe7\xca\xd6\xa5\x3f\x16\x94\x7b\x07\xeb\x8d\xaf\x82\xb3\xfe\x24\x01\x51\x96\xca\x6c\xc3\xee\x20\xee\xea\xdc\x07\x52\xb8\x20\x86\x42\xdc\xa9\xb0\xaf\x2a\x86\x65\x14\x83\x14\x79\xee\x9d\x90\x41\x0c\xcb\xc5\xa2\x8d\x4e\x41\xdc\xda\xec\x85\x11\x53\xbd\xbb\x3d\x0d\xf2\xfd\xbb\xd3\x10\x4b\x7d\x52\x8d\xe7\x43\x91\x4d\x36\xbb\xde\x6e\xc3\x5c\x99\x1e\x2c\x8a\x38\x4b\x6d\x05\x1a\x3e\x24\xb0\xb8\x04\x0d\xab\x04\xc6\xf6\xe9\xf2\x12\xf4\x64\x82\x77\xc6\xd2\x7b\xf4\xea\x7a\x68\xf6\x5d\xe4\xb5\xfa\x92\xf6\x9e\x6b\xbd\x99\x61\x1f\x44\x9c\x31\x6d\xd0\x91\x0a\x5b\x6f\x1e\xf9\xc7\xf0\xc6\x3b\xac\x17\x1b\x78\x8a\x75\xd6\x64\x9d\x79\x79\xcc\x3c\x4a\x45\x2d\x48\xbe\xe9\x6f\xf5\x42\x92\x80\xa6\x7a\x11\xe7\xfc\x6f\x38\x8b\x11\x4e\x0b\x2a\xdf\xa9\xd3\xe2\xf4\x64\x39\x8e\xf4\x15\xbf\x7e\xa6\x62\xbc\x8a\x8e\xdc\xc5\x73\xae\x75\x81\x9e\x99\x85\xf4\x9e\x44\x0d\x35\x66\x6a\xf9\xd0\x15\x43\xe9\xb0\x9a\xc2\x92\x6e\x16\xc7\x28\x8c\x86\x59\x7b\xdc\x03\x61\x93\xc1\xab\xc7\xd3\x16\x83\xb1\x4d\x0c\x46\xfd\x74\x70\x68\x1f\x8f\x6f\x70\xdc\xfd\xb4\xc7\x60\xea\xa2\x1b\xe4\x61\x74\xa5\x70\xd2\xd6\x38\xef\x9d\x05\x12\x58\xf8\x4e\xda\xfb\x3b\x19\x79\x5c\x25\x04\x41\xca\x36\xd9\xec\x93\x35\x2a\x44\x7a\xac\x52\xae\xae\x4c\xa7\xe0\x6a\x6a\x6c\x83\x4d\x56\xb8\xd9\xd7\x4a\x1b\x97\xf7\x97\x6a\x68\x28\x0e\x80\x18\xeb\x1f\x2c\xec\xe6\x6f\x94\x3f\x3c\x3b\xd8\x71\x06\x38\x63\x44\xcc\xab\xd3\x72\xde\x1e\x53\xe5\xfc\xff\x97\x25\x98\x4c\x26\xc1\x0b\xa8\xc3\xe7\x73\x20\x85\xb6\x36\x3b\xaa\xca\xd6\x66\x32\x06\x7c\xc4\xe4\xa0\x0b\x12\x9f\xcf\x81\xb8\xa3\xfd\x29\x77\xb4\x7a\xfa\xb8\x42\x05\x46\x7e\x57\xf8\x2e\xf5\xa6\x91\x06\x7e\xdf\xc9\x40\x9b\xd6\x7f\x56\x53\x8c\xf6\xeb\xb1\x20\xf4\x5a\x77\x71\x4f\xb9\x1f\x32\x12\x77\x1f\x4d\x3c\x88\x3f\xee\x3d\xff\x76\x10\x01\xcd\x47\x55\xa0\x38\x2f\xf7\x51\x15\xc8\x7e\x8a\x0c\x63\xc7\x7f\xd0\x81\xc2\x8f\x08\x41\x7f\x32\x7f\x54\x62\x94\xf4\x20\x05\x71\x19\x29\x41\x42\xfc\x0a\x00\x00\xff\xff\x3f\x7a\xe0\xf6\x49\x08\x00\x00")

func template_srv_2021_goroutine_main_go_tmpl() ([]byte, error) {
	return bindata_read(
		_template_srv_2021_goroutine_main_go_tmpl,
		"template/srv/2021/goroutine/main.go.tmpl",
	)
}

var _template_srv_2021_question_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func template_srv_2021_question_go() ([]byte, error) {
	return bindata_read(
		_template_srv_2021_question_go,
		"template/srv/2021/question.go",
	)
}

var _template_srv_2021_redis_main_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xd2\xd7\x2f\x4a\x4d\xc9\x2c\x56\x78\x36\x65\xfd\xb3\x9e\xc6\xe7\xb3\x5a\x9e\x4d\xdd\xf0\xac\x77\xdd\xf3\x8d\xbb\x9f\xce\xeb\xe6\xd2\xd7\x57\x28\x2e\x29\xca\xcc\x4b\x57\x78\xba\x76\xfa\xf3\x35\xcb\x9e\xec\xd8\x04\xd2\xa2\x90\x93\x59\x5c\xa2\xa0\xf0\xb4\x63\xfa\x8b\x85\x2b\xc0\x02\xc5\xa9\x25\x0a\x0a\x2f\x67\xb7\x3d\x9d\xd0\x01\xe6\x67\x24\x16\x67\x28\x28\x3c\x9b\xba\xf8\x69\xc7\x74\x88\x82\xfc\xa2\x12\xb0\xaa\x67\x73\x3a\x9f\xee\xea\x87\x2a\x05\x04\x00\x00\xff\xff\x32\x6d\xc5\xbc\x8c\x00\x00\x00")

func template_srv_2021_redis_main_go() ([]byte, error) {
	return bindata_read(
		_template_srv_2021_redis_main_go,
		"template/srv/2021/redis/main.go",
	)
}

var _template_srv_2021_reflect_main_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x3d\x4e\xc3\x40\x10\x46\x6b\xcf\x29\x56\x53\xed\x36\x8e\x80\x1b\x40\xcd\x4f\x45\x83\x28\x46\x66\x36\xac\xd8\xdd\x58\x66\x5c\x44\x96\x2b\xd2\xa2\x34\x21\x05\x27\x48\x19\x89\x2a\x12\x88\xcb\x60\x9b\x63\x20\x2f\x01\x09\xea\x37\xdf\xbc\x57\x52\x71\x47\x53\x56\x81\x5c\x04\x70\xa1\x9c\x55\xa2\x34\x64\x68\x83\x20\x64\x58\xb1\xf5\x5c\x08\x82\x01\x90\x79\xc9\x8a\xa2\x0b\xe4\xd5\xbd\x54\x75\x21\x4d\x0b\x60\xeb\x58\x28\x4d\x7b\x60\xd4\x45\xe5\xa2\x9c\x51\x60\x1d\x29\xf0\x78\xe8\xe2\xd4\xa8\x06\x32\x1b\x24\x4f\xd4\xc7\xc4\x0c\xfc\xcc\x47\xbb\x4e\x37\x93\xc9\xc7\xdb\xfb\xb0\xda\x74\xcb\xc7\x6e\xbb\x18\x9e\x17\xfd\x7a\xd7\xbd\x2e\x3f\xb7\x0f\xc3\x6a\xd3\xaf\x77\xfd\xcb\x13\x64\xfb\xa8\xfc\x92\x7c\xcd\xe7\x56\x7f\xab\x9b\xd6\xe4\xa7\x2c\xb7\xb3\x9b\xe3\x79\xf2\xe3\x6f\x0a\x9a\xfc\x84\xbc\xd7\x57\xd7\x7f\xa6\xcd\xff\x47\x78\x70\x78\x84\xa6\x1d\xc3\xbe\x02\x00\x00\xff\xff\x5b\xb9\x29\x87\x19\x01\x00\x00")

func template_srv_2021_reflect_main_go() ([]byte, error) {
	return bindata_read(
		_template_srv_2021_reflect_main_go,
		"template/srv/2021/reflect/main.go",
	)
}

var _template_srv_main_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\x2b\xcd\x4b\x06\x33\x35\x34\x15\xaa\xb9\x38\xed\x40\x20\x86\x8b\xd3\x06\x0c\xf4\xb9\x38\xdf\xef\x69\x74\x50\x7e\xbf\x7f\xa9\xea\xa3\x86\x65\x8f\x1a\x96\xa9\x69\xbd\xdf\xd3\xf1\x7e\x4f\x27\x17\xa7\xa2\x83\xb2\x8a\x6a\x9c\x9a\x96\x86\x26\x57\x2d\x17\x20\x00\x00\xff\xff\x14\x7f\x57\x9c\x54\x00\x00\x00")

func template_srv_main_go_tmpl() ([]byte, error) {
	return bindata_read(
		_template_srv_main_go_tmpl,
		"template/srv/main.go.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"template/apisrv/go.mod.tmpl": template_apisrv_go_mod_tmpl,
	"template/apisrv/go.sum.tmpl": template_apisrv_go_sum_tmpl,
	"template/apisrv/test/test.go": template_apisrv_test_test_go,
	"template/apisrv/test2/song.go": template_apisrv_test2_song_go,
	"template/apisrv/test2/test2.go": template_apisrv_test2_test2_go,
	"template/srv/2021/atomic/main.go": template_srv_2021_atomic_main_go,
	"template/srv/2021/goroutine/main.go.tmpl": template_srv_2021_goroutine_main_go_tmpl,
	"template/srv/2021/question.go": template_srv_2021_question_go,
	"template/srv/2021/redis/main.go": template_srv_2021_redis_main_go,
	"template/srv/2021/reflect/main.go": template_srv_2021_reflect_main_go,
	"template/srv/main.go.tmpl": template_srv_main_go_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"template": &_bintree_t{nil, map[string]*_bintree_t{
		"apisrv": &_bintree_t{nil, map[string]*_bintree_t{
			"go.mod.tmpl": &_bintree_t{template_apisrv_go_mod_tmpl, map[string]*_bintree_t{
			}},
			"go.sum.tmpl": &_bintree_t{template_apisrv_go_sum_tmpl, map[string]*_bintree_t{
			}},
			"test": &_bintree_t{nil, map[string]*_bintree_t{
				"test.go": &_bintree_t{template_apisrv_test_test_go, map[string]*_bintree_t{
				}},
			}},
			"test2": &_bintree_t{nil, map[string]*_bintree_t{
				"song.go": &_bintree_t{template_apisrv_test2_song_go, map[string]*_bintree_t{
				}},
				"test2.go": &_bintree_t{template_apisrv_test2_test2_go, map[string]*_bintree_t{
				}},
			}},
		}},
		"srv": &_bintree_t{nil, map[string]*_bintree_t{
			"2021": &_bintree_t{nil, map[string]*_bintree_t{
				"atomic": &_bintree_t{nil, map[string]*_bintree_t{
					"main.go": &_bintree_t{template_srv_2021_atomic_main_go, map[string]*_bintree_t{
					}},
				}},
				"goroutine": &_bintree_t{nil, map[string]*_bintree_t{
					"main.go.tmpl": &_bintree_t{template_srv_2021_goroutine_main_go_tmpl, map[string]*_bintree_t{
					}},
				}},
				"question.go": &_bintree_t{template_srv_2021_question_go, map[string]*_bintree_t{
				}},
				"redis": &_bintree_t{nil, map[string]*_bintree_t{
					"main.go": &_bintree_t{template_srv_2021_redis_main_go, map[string]*_bintree_t{
					}},
				}},
				"reflect": &_bintree_t{nil, map[string]*_bintree_t{
					"main.go": &_bintree_t{template_srv_2021_reflect_main_go, map[string]*_bintree_t{
					}},
				}},
			}},
			"main.go.tmpl": &_bintree_t{template_srv_main_go_tmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}
